name: Create Release Branch

on:
  # Manual trigger from the Github Actions tab
  workflow_dispatch:
    inputs:
      adapter-version:
        type: string
        description: 'Adapter version (e.g. ''4.9.2.0.0'')'
        required: true
      partner-version:
        type: string
        description: 'Partner version (e.g. ''~> 9.2.0'')'
        required: true
        default: '~> '
      tag:
        type: string
        description: 'Tag to be used as base for the new branch. If empty, the selected branch is used instead.'
        required: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUBSERVICETOKEN }}

jobs:
  create-release-branch:
    runs-on: macos-latest
    steps:

      # Check out the repo at the specified branch.
      - name: Checkout Branch
        if: ${{ inputs.tag == '' }}
        uses: actions/checkout@v3

      # Check out the repo at the specified tag.
      - name: Checkout Tag
        if: ${{ inputs.tag != '' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.tag }}

      # Validate adapter and partner versions are compatible.
      - name: Validate Adapter and Partner Version Match
        run: if [ "$(ruby ./Scripts/validate-adapter-and-partner-versions.rb '${{ inputs.adapter-version }}' '${{ inputs.partner-version }}')" != "true" ]; then exit 1; fi
        shell: bash

      # Validate adapter version is well-formed and not already released.
      - name: Validate Adapter Version
        run: if [ "$(ruby ./Scripts/validate-new-release-version.rb '${{ inputs.adapter-version }}')" != "true" ]; then exit 1; fi
        shell: bash

      # Create and checkout branch
      - name: Create Branch
        run: git checkout -b "release/${{ inputs.adapter-version }}"
        shell: bash

      # Update version strings in podspec.
      - name: Update Version Strings in Podspec
        run: ruby ./Scripts/update_podspec_versions.rb "${{ inputs.adapter-version }}" "${{ inputs.partner-version }}"
        shell: bash

      # Update version string in main adapter class.
      - name: Update Version String in Partner Adapter Class
        run: ruby ./Scripts/update_adapter_class_version.rb "${{ inputs.adapter-version }}"
        shell: bash

      # Add new changelog entry for the current adapter version.
      - name: Add Changelog Entry
        run: ruby ./Scripts/add-changelog-entry.rb "${{ inputs.adapter-version }}" "${{ inputs.partner-version }}"
        shell: bash

      # Commit and push changes.
      - name: Push Changes
        run: git add *.podspec CHANGELOG.md Source/*Adapter.swift && git commit -m '[AUTO-GENERATED] Update version strings and changelog' && git push -u origin "release/${{ inputs.adapter-version }}"
        shell: bash
